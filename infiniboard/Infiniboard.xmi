
#import "infinishared/Infinilist.h"
#import "infinishared/Preferences.h"

#define IFPreferencesRestoreEnabled @"RestoreEnabled", NO

%group IFInfiniboard

static void IFRestoreIconLists() {
    IFPreferencesApply();

    IFListsIterateViews(^(SBIconListView *listView, UIScrollView *scrollView) {
        if (IFPreferencesBoolForKey(IFPreferencesRestoreEnabled)) {
            [scrollView setContentOffset:CGPointZero animated:NO];
        }

        if (IFPreferencesIntForKey(IFPreferencesScrollbarStyle) != kIFScrollbarStyleNone) {
            [scrollView flashScrollIndicators];
        }
    });
}

static int disableRowsGhostlyFlag = 0;

%hook IFConfigurationListClass

- (NSUInteger)rowForIcon:(SBIcon *)icon {
    SBIconView *iconView = IFIconViewForIcon(icon);
    NSUInteger ret = %orig;

    if (IFFlagDefaultDimensions) {
        UIScrollView *scrollView = IFListsScrollViewForListView(self);

        CGPoint origin = [iconView frame].origin;
        origin.y -= [scrollView contentOffset].y;
        ret = [self rowAtPoint:origin];
    }

    return ret;
}

%end

%hook SBIconController

- (CGRect)_contentViewRelativeFrameForIcon:(SBIcon *)icon {
    SBIconView *iconView = IFIconViewForIcon(icon);
    // FIXME: find the actual list that contains this icon
    SBIconListView *listView = [self currentRootIconList];
    UIScrollView *scrollView = IFListsScrollViewForListView(listView);

    CGRect ret = %orig;

    if (![iconView isInDock]) {
        ret.origin.y -= [scrollView contentOffset].y;
    }

    return ret;
}

- (void)setOpenFolder:(id)folder {
    %orig;

    if (folder == nil) return;

    SBIconView *icon = IFIconViewForIcon([[self openFolder] icon]);

    SBIconListView *listView = [self currentRootIconList];
    UIScrollView *scrollView = IFListsScrollViewForListView(listView);

    if (![icon isInDock]) {
        [scrollView scrollRectToVisible:[icon frame] animated:NO];
    } else {
        // Get last icon on current page; scroll that icon to visible.
        // (This fixes visual issues when icons are partially scrolled
        // between rows and a folder is opened when it's in the dock.)
        SBIconView *icon = IFIconViewForIcon([listView iconAtPoint:CGPointMake(0, [listView bounds].size.height) index:NULL]);
        if (icon != nil) {
            [scrollView scrollRectToVisible:[icon frame] animated:NO];
        }
    }
}

- (void)setCurrentPageIconsGhostly:(BOOL)ghostly forRequester:(int)requester skipIcon:(SBIconView *)icon {
    if (disableRowsGhostlyFlag) {
        IFFlagDefaultDimensions -= 1;
        %orig;
        IFFlagDefaultDimensions += 1;
    } else {
        %orig;
    }
}

- (void)_slideFolderOpen:(BOOL)open animated:(BOOL)animated {
    IFFlagDefaultDimensions += 1;
    disableRowsGhostlyFlag += 1;

    // We disable the rows here so that the folder can slide SpringBoard "upwards" if necessary.
    %orig;

    disableRowsGhostlyFlag -= 1;
    IFFlagDefaultDimensions -= 1;
}


- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    if (IFPreferencesBoolForKey(@"FastRestoreEnabled", NO)) {
        IFListsIterateViews(^(SBIconListView *listView, UIScrollView *scrollView) {
            [scrollView setContentOffset:CGPointZero animated:NO];
        });
    }

    %orig;
}

%end

%hook SBUIController

- (void)restoreIconList:(BOOL)unk {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)animateWallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

%end

%end

/* Constructor {{{ */

__attribute__((constructor)) static void infiniboard_init() {
    dlopen("/Library/MobileSubstrate/DynamicLibraries/SixRows.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/7x7SpringBoard.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/CategoriesSB.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/FCSB.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/Iconoclasm.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/FiveIRows.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/FiveIRowsPart1.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/FiveIRowsPart2.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/FiveIRowsPart3.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/OverBoard.dylib", RTLD_LAZY);
    dlopen("/Library/MobileSubstrate/DynamicLibraries/LockInfo.dylib", RTLD_LAZY);

    IFPreferencesInitialize(@"com.chpwn.infiniboard", IFPreferencesApply);

    dlopen("/Library/MobileSubstrate/DynamicLibraries/IconSupport.dylib", RTLD_LAZY);
    [[objc_getClass("ISIconSupport") sharedInstance] addExtension:@"infiniboard"];

    %init(IFBasic);
    %init(IFInfiniboard);
}

/* }}} */

